class ClassAncestorSensor{constructor(_opts){this._Bus=_opts._Bus,this._Pins=_opts._Pins,this._Address=_opts._Address,this._Repeatability=_opts._Repeatability}Init(_sensor_props){this._Name=_sensor_props._Name,this._Type=_sensor_props._Type,this._ChannelNames=_sensor_props._ChannelNames,this._TypeInSignal=_sensor_props._TypeInSignal,this._TypeOutSignal=_sensor_props._TypeOutSignal,this._QuantityChannel=_sensor_props._QuantityChannel,this._BusType=_sensor_props._BusType,this._ManufacturingData=_sensor_props._ManufacturingData}}class ClassMiddleSensor extends ClassAncestorSensor{constructor(_opts){ClassAncestorSensor.apply(this,[_opts]),this._Values=[],this._RawValues=[],this._Channels=[],this._IsInited=!1}get CountChannels(){return this._Channels.filter(o=>o instanceof ClassChannel).length}GetChannel(_num){const num=_num;return this._Channels[num]instanceof ClassChannel?this._Channels[num]:null}Init(_sensor_props){if(!this._IsInited){ClassAncestorSensor.prototype.Init.apply(this,[_sensor_props]);for(let i=0;i<this._QuantityChannel;i++){try{this._Channels[i]=new ClassChannel(this,i)}catch(e){this._Channels[i]=null}this._Values[i]=[],this._RawValues[i]=[],Object.defineProperty(this,`Ch${i}_Value`,{get:()=>this._Values[i][0],set:val=>{this._RawValues[i][0]=val,val=this._Channels[i]._Limits.SupressOutValue(val),val=this._Channels[i]._Limits.CalibrateOutValue(val),this._Values[i][0]=val,this._Channels[i]._Alarms.CheckZones(val)}})}this._IsInited=!0}}Start(_ch_num,_period,_mode){}Stop(_ch_num){}ChangeFrequency(_ch_num,_period){}Configure(_ch_num,_config_data){let channel=this.GetChannel(_ch_num);_config_data._OutLims&&channel._Limits.SetOutLim(_config_data._OutLims[0],_config_data._OutLims[1]),(_config_data._K||_config_data._B)&&channel._Limits.SetTransmissionOut(_config_data._K,_config_data._B),_config_data._GreenZone&&channel._Alarms.SetGreenZone.apply(this,_config_data._GreenZone),_config_data._YellowZone&&channel._Alarms.SetYellowZone.apply(this,_config_data._YellowZone),_config_data._RedZone&&channel._Alarms.SetRedZone.apply(this,_config_data._RedZone)}Reset(){}Run(){}}class ClassChannel{constructor(sensor,num){if(sensor._Channels[num]instanceof ClassChannel)return sensor._Channels[num];this._ThisSensor=sensor,this._NumChannel=num,this._Limits=new ClassLimits,this._Alarms=new ClassAlarms,sensor._Channels[num]=this}Start(_period,_mode){return this._ThisSensor.Start(this._NumChannel,_period,_mode||"default")}Stop(){return this._ThisSensor.Stop(this._NumChannel)}ChangeFrequency(_ch_num,_period){}Reset(){return this._ThisSensor.Reset(Array.from(arguments))}Run(){return this._ThisSensor.Run(Array.from(arguments))}Configure(_config_data){return this._ThisSensor.Configure(this._NumChannel,_config_data)}get Value(){return this._ThisSensor[`Ch${this._NumChannel}_Value`]}get ID(){return this._ThisSensor._Name+this._NumChannel}}class ClassLimits{constructor(){this._Limits=[],this.SetOutLim(-1/0,1/0),this.SetTransmissionOut(1,0)}SetOutLim(_limLow,_limHigh){if("number"!=typeof _limLow||"number"!=typeof _limHigh)throw new Error("Not a number");if(_limLow>=_limHigh)throw new Error("limLow value shoud be less than limHigh");this._Limits[0]=_limLow,this._Limits[1]=_limHigh}SupressOutValue(val){return val<this._Limits[0]?this._Limits[0]:val>this._Limits[1]?this._Limits[1]:val}SetTransmissionOut(_k,_b){if("number"!=typeof _k||"number"!=typeof _b)throw new Error;this._K=_k,this._B=_b}CalibrateOutValue(val){return val*this._K+this._B}}class ClassAlarms{constructor(){this._ZoneType=(low,high,cb_low,cb_high)=>({low:low,high:high,callbackLow:cb_low||function(x){},callbackHigh:cb_high||cb_low||function(x){},is:function(val){return val>=this.high||val<this.low},invoke:function(val){val>=this.high?this.callbackHigh(val):this.callbackLow(val)}}),this._Zones={red:this._ZoneType(),yellow:this._ZoneType(),green:{invoke:x=>x}},this._CurrentZone="green"}SetYellowZone(_low,_high,_callbackLow,_callbackHigh){if("number"!=typeof _low||"number"!=typeof _high||_low>=_high)throw new Error("Invalid args");if(_low<=this._Zones.red.low||_high>=this._Zones.red.high)throw new Error;this._Zones.yellow=this._ZoneType(_low,_high,_callbackLow,_callbackHigh)}SetRedZone(_low,_high,_callbackLow,_callbackHigh){if("number"!=typeof _low||"number"!=typeof _high||_low>=_high)throw new Error("Invalid args");if(_low>=this._Zones.yellow.low||_high<=this._Zones.yellow.high)throw new Error;this._Zones.red=this._ZoneType(_low,_high,_callbackLow,_callbackHigh)}SetGreenZone(_callback){if("function"!=typeof _callback)throw new Error;this._Zones.green={invoke:_callback}}CheckZones(val){let zone=this._Zones.red.is(val)?"red":this._Zones.yellow.is(val)?"yellow":"green";zone!==this._CurrentZone&&(this._CurrentZone=zone,this._Zones[zone].invoke(val))}}exports=ClassMiddleSensor;