class ClassAncestorSensor{constructor(_opts){this._Bus=_opts._Bus,this._Pins=_opts._Pins}InitSensProperies(_sensor_props){if("number"!=typeof _sensor_props._QuantityChannel||_sensor_props._QuantityChannel<1)throw new Error("");this._QuantityChannel=_sensor_props._QuantityChannel,["_Name","_Type","_ChannelNames","_TypeInSignal","_TypeOutSignal","_BusType"].forEach(prop=>{if("string"!=typeof _sensor_props[prop])throw new Error("Incorrect sensor property");this[prop]=_sensor_props[prop]}),this._ManufacturingData=_sensor_props._ManufacturingData}}class ClassMiddleSensor extends ClassAncestorSensor{constructor(_sensor_props){ClassAncestorSensor.apply(this,[_sensor_props]),this._Values=[],this._Channels=[],this.InitSensProperies(_sensor_props),this.InitChannels(this._QuantityChannel),this._IsInited=!0}get CountChannels(){return this._Channels.filter(o=>o instanceof ClassChannel).length}GetChannel(_num){const num=_num;return this._Channels[num]instanceof ClassChannel?this._Channels[num]:null}InitChannels(_channels_quantity){if(!this._IsInited)for(let i=0;i<_channels_quantity;i++){try{this._Channels[i]=new ClassChannel(this,i)}catch(e){this._Channels[i]=null}this._Values[i]={depth:1,raw:[],processed:[],count:0,push:function(_val,_rawVal){++this.count>=this.depth&&(this.raw.shift(),this.processed.shift()),this.raw.push(_rawVal),this.processed.push(_val)}},Object.defineProperty(this,`Ch${i}_Value`,{get:()=>this._Values[i],set:_val=>{let val=_val;val=this._Channels[i]._Limits.SupressOutValue(val),val=this._Channels[i]._Limits.CalibrateOutValue(val),this._Values[i].push(val,_val),this._Channels[i]._Alarms.CheckZones(val)}})}}SetFilterDepth(_ch_num,_depth){if("number"!=typeof _depth||_depth<1)throw new Error;this._RawValues[_ch_num].depth=_depth}Init(_opts){}Start(_ch_num,_period,_opts){}Stop(_ch_num){}ChangeFrequency(_ch_num,_period){}Configure(_ch_num,_opts){}Reset(){}SetAddress(_addr){}SetRepeatability(_rep){}SetPrecision(_pres){}Run(_ch_num,_opts){}Read(_reg){}Write(_reg,_val){}}class ClassChannel{constructor(sensor,num){if(sensor._Channels[num]instanceof ClassChannel)return sensor._Channels[num];this._ThisSensor=sensor,this._NumChannel=num,this._Limits=new ClassLimits,this._Alarms=new ClassAlarms,sensor._Channels[num]=this}Init(_opts){}Start(_period,_opts){return this._ThisSensor.Start(this._NumChannel,_period,{})}Stop(){return this._ThisSensor.Stop(this._NumChannel)}ChangeFrequency(_ch_num,_period){}Reset(){return this._ThisSensor.Reset(Array.from(arguments))}Run(_opts){return this._ThisSensor.Run(this._NumChannel,_opts)}Configure(_opts){return this._ThisSensor.Configure(this._NumChannel,_opts)}get Value(){return this._ThisSensor[`Ch${this._NumChannel}_Value`]}get ID(){return this._ThisSensor._Name+this._NumChannel}}class ClassLimits{constructor(){this._Limits=[],this.SetOutLim(-1/0,1/0),this.SetTransmissionOut(1,0)}SetOutLim(_limLow,_limHigh){if("number"!=typeof _limLow||"number"!=typeof _limHigh)throw new Error("Not a number");if(_limLow>=_limHigh)throw new Error("limLow value shoud be less than limHigh");this._Limits[0]=_limLow,this._Limits[1]=_limHigh}SupressOutValue(val){return val<this._Limits[0]?this._Limits[0]:val>this._Limits[1]?this._Limits[1]:val}SetTransmissionOut(_k,_b){if("number"!=typeof _k||"number"!=typeof _b)throw new Error;this._K=_k,this._B=_b}CalibrateOutValue(val){return val*this._K+this._B}}class ClassAlarms{constructor(){this._ZoneType=(low,high,cb_low,cb_high)=>({low:low,high:high,callbackLow:cb_low||function(x){},callbackHigh:cb_high||cb_low||function(x){},is:function(val){return val>=this.high||val<this.low},invoke:function(val){val>=this.high?this.callbackHigh(val):this.callbackLow(val)}}),this._Zones={red:this._ZoneType(),yellow:this._ZoneType(),green:{invoke:x=>x}},this._CurrentZone="green"}SetYellowZone(_low,_high,_callbackLow,_callbackHigh){if("number"!=typeof _low||"number"!=typeof _high||_low>=_high)throw new Error("Invalid args");if(_low<=this._Zones.red.low||_high>=this._Zones.red.high)throw new Error;this._Zones.yellow=this._ZoneType(_low,_high,_callbackLow,_callbackHigh)}SetRedZone(_low,_high,_callbackLow,_callbackHigh){if("number"!=typeof _low||"number"!=typeof _high||_low>=_high)throw new Error("Invalid args");if(_low>=this._Zones.yellow.low||_high<=this._Zones.yellow.high)throw new Error;this._Zones.red=this._ZoneType(_low,_high,_callbackLow,_callbackHigh)}SetGreenZone(_callback){if("function"!=typeof _callback)throw new Error;this._Zones.green={invoke:_callback}}CheckZones(val){let zone=this._Zones.red.is(val)?"red":this._Zones.yellow.is(val)?"yellow":"green";zone!==this._CurrentZone&&(this._CurrentZone=zone,this._Zones[zone].invoke(val))}}exports=ClassMiddleSensor;