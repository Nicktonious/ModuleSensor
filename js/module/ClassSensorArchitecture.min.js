class ClassAncestorSensor{constructor(_sensor_props){this._Name=_sensor_props._Name,this._Type=_sensor_props._Type,this._ChannelNames=_sensor_props._ChannelNames,this._TypeInSignal=_sensor_props._TypeInSignal,this._TypeOutSignal=_sensor_props._TypeOutSignal,this._QuantityChannel=_sensor_props._QuantityChannel,this._BusType=_sensor_props._BusType,this._ManufacturingData=_sensor_props._ManufacturingData}}class ClassMiddleSensor extends ClassAncestorSensor{constructor(_opts,_sensor_props){console.log(_sensor_props),ClassAncestorSensor.apply(this,[_sensor_props]),this._Values=[],this._Channels=new Array(this._QuantityChannel).fill({_Limits:new ClassLimits,_Alarms:new ClassAlarms});for(let i=0;i<this._QuantityChannel;i++)Object.defineProperty(this,`Ch${i}_Value`,{get:()=>this._Values[i],set:val=>{val=this._Channels[i]._Limits.HandleOutValue(val),this._Channels[i]._Alarms.Handle(val),this._Values[i]=val}})}get CountChannels(){return this._Channels.filter(o=>o instanceof ClassChannel).length}GetChannel(_num){const num=_num;return this._Channels[num]instanceof ClassChannel?this._Channels[num]:null}Init(){}Start(){}Stop(){}Reset(){}Run(){}ChangeFrequency(){}}class ClassChannel{constructor(sensor,num){if(!sensor)throw new Error("Sensor object is null or undefined");if(!(sensor instanceof ClassMiddleSensor))throw new Error("Object does not inherit from ClassMiddleSensor");if(num<0||num>=sensor._QuantityChannel)throw new Error("Incorrect channel num");if(sensor._Channels[num]instanceof ClassChannel)return sensor._Channels[num];this._ThisSensor=sensor,this._NumChannel=num,this._Limits=new ClassLimits,this._Alarms=new ClassAlarms,["Init","Start","Stop","Reset","Run","ChangeFrequeny"].filter(prop=>"function"==typeof sensor[prop]).forEach(prop=>this[prop]=sensor[prop].bind(sensor)),sensor._Channels[num]=this}get Value(){return this._ThisSensor._Values[this._NumChannel]}get ThisSensor(){return this._ThisSensor}get ID(){return this._ThisSensor._Name+this._NumChannel}}class ClassLimits{constructor(){this._Limits=[],this.SetOutLim(),this.SetTransmissionOut()}GetLimsPair(_limLow,_limHigh){let limLow=_limLow||-1/0,limHigh=_limHigh||1/0;if("number"!=typeof limLow)throw limLow=-1/0,new Error("Not a number");if("number"!=typeof limHigh)throw limHigh=1/0,new Error("Not a number");if(limLow>=limHigh)throw new Error("limLow value shoud be less than limHigh");return[limLow,limHigh]}SetInLim(_limLow,_limHigh){const lims=this.GetLimsPair(_limLow,_limHigh);this._Limits[2]=lims[0],this._Limits[3]=lims[1]}SetOutLim(_limLow,_limHigh){const lims=this.GetLimsPair(_limLow,_limHigh);this._Limits=lims[0],this._Limits=lims[1]}HandleInValue(val){return val<this._Limits[2]?this._Limits[2]:val>this._Limits[3]?this._Limits[3]:val}HandleOutValue(val){return(val=val*this._K+this._B)<this._Limits[0]?this._Limits[0]:val>this._Limits[1]?this._Limits[1]:val}SetTransmissionOut(_k,_b){const k=_k||1,b=_b||0;if("number"!=typeof k||"number"!=typeof b)throw new Error;this._K=k,this._B=b}}class ClassAlarms{constructor(){this._ZoneType=(low,high,cb)=>({low:low||-1/0,high:high||1/0,callback:cb||(x=>x),is(val){return val>=this.high||val<=this.low}}),this._Zones={red:this._ZoneType(),yellow:this._ZoneType(),green:{callback:x=>x}},this._CurrentZone=""}SetYellowZone(_low,_high,_callback){if("number"!=typeof _low||"number"!=typeof _high||_low>=_high)throw new Error;if(this._Zones.red.isUsed&&(_low<=this._Zones.red.low||_high>=this._Zones.red.high))throw new Error;this._Zones.yellow=this._ZoneType(_low,_high,_callback),this._Zones.yellow.isUsed=!0}SetRedZone(_low,_high,_callback){if("number"!=typeof _low||"number"!=typeof _high||_low>=_high)throw new Error;if(this._Zones.yellow.isUsed&&(_low>=this._Zones.yellow.low||_high<=this._Zones.yellow.high))throw new Error;this._Zones.red.isUsed=!0,this._Zones.red=this._ZoneType(_low,_high,_callback)}SetGreenZone(_callback){if("function"!=typeof _callback)throw new Error;this._Zones.green={callback:_callback}}Handle(val){let zone=this._Zones.red.is(val)?"red":this._Zones.yellow.is(val)?"yellow":"green";zone!==this._CurrentZone&&(this._CurrentZone=zone,this._Zones[zone].callback(val))}}exports={ClassSensor:ClassMiddleSensor};